<img src="img/logo.png" style="display: block; margin: 0 auto; width: 350px;
max-width: 350px;">

@TINYSPLINE_DESCRIPTION@

## Why Another Spline Library?

Although a number of sophisticated spline libraries already exists, most of 
them are available only for a limited set of programming languages (mostly 
C/C++ and Python), support only quadratic and cubic splines, or represent 
splines with fixed dimensionality. TinySpline, on the other hand, has been
developed with compatibility and genericness in mind:

- TinySpline's core is implemented in ANSI C, therefore it is supported by most
  compiler suites and runtime environments.

- The object oriented interface is available for a various number programming
  languages, including C++, C#, D, Go, Java, Lua, Octave, PHP, Python, R, and
  Ruby. Support for additional languages is added periodically.

- Splines may have any degree and dimension. For example, two-dimensional
  splines of degree zero (which basically is a sequence of 2D points) as well
  as four-dimensional splines of degree ten can be created and processed (using
  a single struct/class only).

In addition, the following features are available:

- Cubic spline interpolation (the interpolated points do not have to be
  sorted at their components).

- Subdivision (also referred to as decomposition) of B-Splines into Bézier
  curves. This is useful when drawing splines.

- Knot- and bisection-based evaluation.

- Transformations: _knot insertion_, _spline splitting_, _derivative_,
  _tension_ etc.

- Import from and export to JSON.

- The C interface includes a powerful, system-independent, and thread-safe
  exception like error handling system which does not depend on setjmp/longjmp
  or the like.

- Compile time support for float and double precision.

## License

TinySpline is licensed under the terms of the
[MIT License](https://opensource.org/licenses/mit-license).

## References

If TinySpline does not meet your requirements, feel free to create an
[issue](@TINYSPLINE_URL@/issues) on [Github](@TINYSPLINE_URL@) or have a look
at one of the libraries listed below:

- [https://github.com/pboyer/verb](https://github.com/pboyer/verb)
  — Open-source, cross-platform NURBS.

- [https://nurbs-python.readthedocs.io/en/latest/](https://nurbs-python.readthedocs.io/en/latest/)
  — NURBS-Python (geomdl) is a cross-platform (pure Python), object-oriented
  B-Spline and NURBS library. It is compatible with Python versions 2.7.x,
  3.4.x and later. It supports rational and non-rational curves, surfaces and
  volumes.

- [http://libnurbs.sourceforge.net](http://libnurbs.sourceforge.net) — A C++
  — non-uniform rational B-Splines library.

- [https://github.com/bgrimstad/splinter](https://github.com/bgrimstad/splinter)
  — SPLINTER (SPLine INTERpolation) is a library for multivariate function
  approximation with splines. The library is implemented in C++ and provides
  bindings for Python and Matlab.

- [https://www.gnu.org/software/gsl/doc/html/bspline.html](https://www.gnu.org/software/gsl/manual/html_node/Basis-Splines.html)
  — A software library for numerical computations in applied mathematics and
  science.

- [https://kluge.in-chemnitz.de/opensource/spline/](https://kluge.in-chemnitz.de/opensource/spline/)
  — Cubic Spline interpolation in C++.

- [https://github.com/ejmahler/SplineLibrary](https://github.com/ejmahler/SplineLibrary)
  — A C++ library created to provide open-source reference implementations of
  many spline functions, e.g., Natural Splines and Catmull-Rom Splines.

- [https://github.com/thibauts/b-spline](https://github.com/thibauts/b-spline)
  — A JavaScript library for B-Spline interpolation of control points of any
  dimensionality using de Boor's algorithm.

To gain further insights into the theory of splines, have a look at the
following references:

- Leslie Piegl and Wayne Tiller. The NURBS Book. Springer Science & Business
  Media, 2012

- [A Primer on Bézier Curves](https://pomax.github.io/bezierinfo)

- [B-spline Curves: Definition](https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/bspline-curve.html)

- [De Boor's Algorithm](https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/B-spline/de-Boor.html)

- [NURBS: Definition](https://pages.mtu.edu/~shene/COURSES/cs3621/NOTES/spline/NURBS/NURBS-def.html)

- [NURBS curve made easy](https://www.codeproject.com/Articles/996281/NURBS-curve-made-easy)
